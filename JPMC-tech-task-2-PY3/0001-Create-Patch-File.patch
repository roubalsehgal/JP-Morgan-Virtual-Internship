From 66154fc011501e4c22d22058c8ed2abeef7233b9 Mon Sep 17 00:00:00 2001
From: Roubal Sehgal <roubalsehgal2000@gmail.com>
Date: Mon, 27 Apr 2020 17:38:33 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 31 +++++++++++++++++++++++++------
 src/Graph.tsx | 17 ++++++++++++++---
 2 files changed, 39 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..1b09d99 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,9 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+
+  // Added Show Graph Property
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +25,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // Set Show graph Property
+      showGraph: false,
     };
   }
 
@@ -29,18 +34,32 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    // Added code to ensure that the graph doesn’t render until a user clicks the ‘Start Streaming’ button
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    // Modified the `getDataFromServer`method to contact the
+    // server and get data from it continuously instead of just getting data from it
+    // once every time you click the button
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState ({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x > 1000){
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..8be28d5 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,8 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+  // Enabled `PerspectiveViewerElement` to behave like an HTMLElement
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // Assigned const `elem`
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,8 +49,17 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+      // Added more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+        {"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.26.2.windows.1

